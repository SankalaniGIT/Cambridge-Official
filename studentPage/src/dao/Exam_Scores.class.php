<?php
/**
 *  This is auto generated by PHP5 Tools based on the Database Schema.
 *  Author : MahiShimi PHP5 Tools version 1.1
 *  Project : Cambridge
 *  Last Updated : Fri 08th Feb,2013 04:49 am
 *  Table Name : exam_scores
 *  Modifier : This Db tool is currently modified by Maheshwaran Varghese on 10th August 2011
 */

class Exam_Scores
{
	public $id;
	public $student_id;
	public $exam_id;
	public $marks;
	public $grading_level_id;
	public $remarks;
	public $is_failed;
	public $created_at;
	public $updated_at;
	public $max_order_no;

	//===int(11)===//
	public function getId(){return $this->id;}
	public function setId($id){$this->id= $id;}

	//===int(11)===//
	public function getStudent_id(){return $this->student_id;}
	public function setStudent_id($student_id){$this->student_id= $student_id;}

	//===int(11)===//
	public function getExam_id(){return $this->exam_id;}
	public function setExam_id($exam_id){$this->exam_id= $exam_id;}

	//===decimal(7,2)===//
	public function getMarks(){return $this->marks;}
	public function setMarks($marks){$this->marks= $marks;}

	//===int(11)===//
	public function getGrading_level_id(){return $this->grading_level_id;}
	public function setGrading_level_id($grading_level_id){$this->grading_level_id= $grading_level_id;}

	//===varchar(255)===//
	public function getRemarks(){return $this->remarks;}
	public function setRemarks($remarks){$this->remarks= $remarks;}

	//===tinyint(1)===//
	public function getIs_failed(){return $this->is_failed;}
	public function setIs_failed($is_failed){$this->is_failed= $is_failed;}

	//===datetime===//
	public function getCreated_at(){return $this->created_at;}
	public function setCreated_at($created_at){$this->created_at= $created_at;}

	//===datetime===//
	public function getUpdated_at(){return $this->updated_at;}
	public function setUpdated_at($updated_at){$this->updated_at= $updated_at;}

	//=== max_order_no ===//
	public function getMax_order_no(){return $this->max_order_no;}
	public function setMax_order_no($max_order_no){$this->max_order_no= $max_order_no;}

}


// Implement class of Exam_Scores
class Exam_ScoresDaoImpl
{
	private $db = null ;

	function __construct() {
		$this->db=new DBConnection();
	}

	/** SAVE THE Exam_Scores OBJECT INTO exam_scores */
	function saveExam_Scores($exam_scores) {
		$exam_scoresIn=new Exam_Scores();
		$exam_scoresIn=$exam_scores;

		$SQL= sprintf("INSERT INTO exam_scores(student_id,exam_id,marks,grading_level_id,remarks,is_failed,created_at,updated_at) VALUES(%d,%d,%d,%d,'%s',%d,'%s','%s')",
		mysql_real_escape_string($exam_scoresIn->getStudent_id()),mysql_real_escape_string($exam_scoresIn->getExam_id()),mysql_real_escape_string($exam_scoresIn->getMarks()),mysql_real_escape_string($exam_scoresIn->getGrading_level_id()),mysql_real_escape_string($exam_scoresIn->getRemarks()),mysql_real_escape_string($exam_scoresIn->getIs_failed()),mysql_real_escape_string($exam_scoresIn->getCreated_at()),mysql_real_escape_string($exam_scoresIn->getUpdated_at()));

		$this->db->executeQuery($SQL);

	}


	/** UPDATE THE TABLE exam_scores */
	function updateExam_Scores($exam_scores) {
		$exam_scoresIn=new Exam_Scores();
		$exam_scoresIn=$exam_scores;

		$SQL= sprintf("UPDATE exam_scores SET student_id=%d,exam_id=%d,marks=%d,grading_level_id=%d,remarks='%s',is_failed=%d,created_at='%s',updated_at='%s' WHERE id=%d ",
		mysql_real_escape_string($exam_scoresIn->getStudent_id()),mysql_real_escape_string($exam_scoresIn->getExam_id()),mysql_real_escape_string($exam_scoresIn->getMarks()),mysql_real_escape_string($exam_scoresIn->getGrading_level_id()),mysql_real_escape_string($exam_scoresIn->getRemarks()),mysql_real_escape_string($exam_scoresIn->getIs_failed()),mysql_real_escape_string($exam_scoresIn->getCreated_at()),mysql_real_escape_string($exam_scoresIn->getUpdated_at()),$exam_scoresIn->getId());

		$this->db->executeQuery($SQL);

	}

	/** GET ALL DATA FROM THE TABLE exam_scores */
	function getAllExam_Scores() {
		$SQL="SELECT * FROM exam_scores";
		$this->db->executeQuery($SQL);

		$result = array();
		$count = 0;

		while($rs = $this->db->nextRecord())
		{
			$exam_scores = new Exam_Scores();
			$exam_scores->setId($rs['id']);
			$exam_scores->setStudent_id($rs['student_id']);
			$exam_scores->setExam_id($rs['exam_id']);
			$exam_scores->setMarks($rs['marks']);
			$exam_scores->setGrading_level_id($rs['grading_level_id']);
			$exam_scores->setRemarks($rs['remarks']);
			$exam_scores->setIs_failed($rs['is_failed']);
			$exam_scores->setCreated_at($rs['created_at']);
			$exam_scores->setUpdated_at($rs['updated_at']);
			$result[$count++] = $exam_scores;
		}

		$this->db->closeRs();
		return $result;

	}

	/** GET ALL DATA BY STATUS FROM THE TABLE exam_scores */
	function getAllExam_ScoresByStatus() {
		$SQL="SELECT * FROM exam_scores WHERE status = 'Yes'";
		$this->db->executeQuery($SQL);

		$result = array();
		$count = 0;

		while($rs = $this->db->nextRecord())
		{
			$exam_scores = new Exam_Scores();
			$exam_scores->setId($rs['id']);
			$exam_scores->setStudent_id($rs['student_id']);
			$exam_scores->setExam_id($rs['exam_id']);
			$exam_scores->setMarks($rs['marks']);
			$exam_scores->setGrading_level_id($rs['grading_level_id']);
			$exam_scores->setRemarks($rs['remarks']);
			$exam_scores->setIs_failed($rs['is_failed']);
			$exam_scores->setCreated_at($rs['created_at']);
			$exam_scores->setUpdated_at($rs['updated_at']);
			$result[$count++] = $exam_scores;
		}

		$this->db->closeRs();
		return $result;

	}

	/** GET ALL DATA BY ID DESC FROM THE TABLE exam_scores */
	function getAllExam_ScoresByIdDesc() {
		$SQL="SELECT * FROM exam_scores ORDER BY id DESC";
		$this->db->executeQuery($SQL);

		$result = array();
		$count = 0;

		while($rs = $this->db->nextRecord())
		{
			$exam_scores = new Exam_Scores();
			$exam_scores->setId($rs['id']);
			$exam_scores->setStudent_id($rs['student_id']);
			$exam_scores->setExam_id($rs['exam_id']);
			$exam_scores->setMarks($rs['marks']);
			$exam_scores->setGrading_level_id($rs['grading_level_id']);
			$exam_scores->setRemarks($rs['remarks']);
			$exam_scores->setIs_failed($rs['is_failed']);
			$exam_scores->setCreated_at($rs['created_at']);
			$exam_scores->setUpdated_at($rs['updated_at']);
			$result[$count++] = $exam_scores;
		}

		$this->db->closeRs();
		return $result;

	}

	/** GET ONE DATA BY ID FROM THE TABLE exam_scores */
	function getOneExam_ScoresById($id) {
		$SQL="SELECT * FROM exam_scores WHERE id = '$id'";
		$this->db->executeQuery($SQL);

		$result = array();
		$count = 0;

		while($rs = $this->db->nextRecord())
		{
			$exam_scores = new Exam_Scores();
			$exam_scores->setId($rs['id']);
			$exam_scores->setStudent_id($rs['student_id']);
			$exam_scores->setExam_id($rs['exam_id']);
			$exam_scores->setMarks($rs['marks']);
			$exam_scores->setGrading_level_id($rs['grading_level_id']);
			$exam_scores->setRemarks($rs['remarks']);
			$exam_scores->setIs_failed($rs['is_failed']);
			$exam_scores->setCreated_at($rs['created_at']);
			$exam_scores->setUpdated_at($rs['updated_at']);
			$result[$count++] = $exam_scores;
		}

		$this->db->closeRs();
		if(count($result) > 0 ){
			return $result[0];
		}else{
			return null;
		}
	}

	/** GET DATA BY ID, STATUS FROM THE TABLE exam_scores */
	function getAllExam_ScoresById_Status($id) {
		$SQL="SELECT * FROM exam_scores WHERE id = '$id' AND status = 'Yes'";
		$this->db->executeQuery($SQL);

		$result = array();
		$count = 0;

		while($rs = $this->db->nextRecord())
		{
			$exam_scores = new Exam_Scores();
			$exam_scores->setId($rs['id']);
			$exam_scores->setStudent_id($rs['student_id']);
			$exam_scores->setExam_id($rs['exam_id']);
			$exam_scores->setMarks($rs['marks']);
			$exam_scores->setGrading_level_id($rs['grading_level_id']);
			$exam_scores->setRemarks($rs['remarks']);
			$exam_scores->setIs_failed($rs['is_failed']);
			$exam_scores->setCreated_at($rs['created_at']);
			$exam_scores->setUpdated_at($rs['updated_at']);
			$result[$count++] = $exam_scores;
		}

		$this->db->closeRs();
		if(count($result) > 0 ){
			return $result[0];
		}else{
			return null;
		}
	}

	/** GET LAST RECORD FROM THE TABLE exam_scores */
	function getLastRec($field) {
		$SQL="SELECT * FROM exam_scores ORDER BY $field DESC LIMIT 1";
		$this->db->executeQuery($SQL);

		$result = array();
		$count = 0;

		while($rs = $this->db->nextRecord())
		{
			$exam_scores = new Exam_Scores();
			$exam_scores->setId($rs['id']);
			$exam_scores->setStudent_id($rs['student_id']);
			$exam_scores->setExam_id($rs['exam_id']);
			$exam_scores->setMarks($rs['marks']);
			$exam_scores->setGrading_level_id($rs['grading_level_id']);
			$exam_scores->setRemarks($rs['remarks']);
			$exam_scores->setIs_failed($rs['is_failed']);
			$exam_scores->setCreated_at($rs['created_at']);
			$exam_scores->setUpdated_at($rs['updated_at']);
			$result[$count++] = $exam_scores;
		}

		$this->db->closeRs();
		if(count($result) > 0 ){
			return $result[0];
		}else{
			return null;
		}
	}

	/** GET DATA ORDER BY ORDER_NO, STATUS FROM THE TABLE exam_scores */
	function getAllExam_Scores_By_Status_ORDER_BY_Order_no() {
		$SQL="SELECT * FROM exam_scores WHERE status = 'Yes' ORDER BY CAST(order_no AS DECIMAL)";
		$this->db->executeQuery($SQL);

		$result = array();
		$count = 0;

		while($rs = $this->db->nextRecord())
		{
			$exam_scores = new Exam_Scores();
			$exam_scores->setId($rs['id']);
			$exam_scores->setStudent_id($rs['student_id']);
			$exam_scores->setExam_id($rs['exam_id']);
			$exam_scores->setMarks($rs['marks']);
			$exam_scores->setGrading_level_id($rs['grading_level_id']);
			$exam_scores->setRemarks($rs['remarks']);
			$exam_scores->setIs_failed($rs['is_failed']);
			$exam_scores->setCreated_at($rs['created_at']);
			$exam_scores->setUpdated_at($rs['updated_at']);
			$result[$count++] = $exam_scores;
		}

		$this->db->closeRs();
		return $result;

	}

	/** GET DATA BY ID, STATUS ORDER BY ORDER_NO FROM THE TABLE exam_scores */
	function getExam_Scores_By_Id_Status_ORDER_BY_Order_no() {
		$SQL="SELECT * FROM exam_scores WHERE id = '$id' AND status = 'Yes' ORDER BY CAST(order_no AS DECIMAL)";
		$this->db->executeQuery($SQL);

		$result = array();
		$count = 0;

		while($rs = $this->db->nextRecord())
		{
			$exam_scores = new Exam_Scores();
			$exam_scores->setId($rs['id']);
			$exam_scores->setStudent_id($rs['student_id']);
			$exam_scores->setExam_id($rs['exam_id']);
			$exam_scores->setMarks($rs['marks']);
			$exam_scores->setGrading_level_id($rs['grading_level_id']);
			$exam_scores->setRemarks($rs['remarks']);
			$exam_scores->setIs_failed($rs['is_failed']);
			$exam_scores->setCreated_at($rs['created_at']);
			$exam_scores->setUpdated_at($rs['updated_at']);
			$result[$count++] = $exam_scores;
		}

		$this->db->closeRs();
		if(count($result) > 0 ){
			return $result[0];
		}else{
			return null;
		}
	}

	/** GET DATA MAXIMUM ORDER NO FROM THE TABLE exam_scores */
	function getLastOrderNo() {
		$SQL="SELECT MAX(CAST(order_no AS DECIMAL)) AS max_order_no FROM exam_scores";
		$this->db->executeQuery($SQL);

		$result = array();
		$count = 0;

		while($rs = $this->db->nextRecord())
		{
			$exam_scores = new Exam_Scores();
			$exam_scores->setId($rs['id']);
			$exam_scores->setStudent_id($rs['student_id']);
			$exam_scores->setExam_id($rs['exam_id']);
			$exam_scores->setMarks($rs['marks']);
			$exam_scores->setGrading_level_id($rs['grading_level_id']);
			$exam_scores->setRemarks($rs['remarks']);
			$exam_scores->setIs_failed($rs['is_failed']);
			$exam_scores->setCreated_at($rs['created_at']);
			$exam_scores->setUpdated_at($rs['updated_at']);
			$exam_scores->setMax_order_no($rs['max_order_no']);
			$result[$count++] = $exam_scores;
		}

		$this->db->closeRs();
		if(count($result) > 0 ){
			return $result[0];
		}else{
			return null;
		}
	}

	function getExam_Scores_By_Student_id($student_id) {
		$SQL="SELECT * FROM exam_scores WHERE student_id = '$student_id'";
		$this->db->executeQuery($SQL);

		$result = array();
		$count = 0;

		while($rs = $this->db->nextRecord())
		{
			$exam_scores = new Exam_Scores();
			$exam_scores->setId($rs['id']);
			$exam_scores->setStudent_id($rs['student_id']);
			$exam_scores->setExam_id($rs['exam_id']);
			$exam_scores->setMarks($rs['marks']);
			$exam_scores->setGrading_level_id($rs['grading_level_id']);
			$exam_scores->setRemarks($rs['remarks']);
			$exam_scores->setIs_failed($rs['is_failed']);
			$exam_scores->setCreated_at($rs['created_at']);
			$exam_scores->setUpdated_at($rs['updated_at']);
			$result[$count++] = $exam_scores;
		}

		$this->db->closeRs();
		return $result;

	}

	function getExam_Scores_By_Student_id_Exam_id($student_id,$exam_id) {
		$SQL="SELECT * FROM exam_scores WHERE student_id = '$student_id' AND exam_id = '$exam_id'";
		$this->db->executeQuery($SQL);

		$result = array();
		$count = 0;

		while($rs = $this->db->nextRecord())
		{
			$exam_scores = new Exam_Scores();
			$exam_scores->setId($rs['id']);
			$exam_scores->setStudent_id($rs['student_id']);
			$exam_scores->setExam_id($rs['exam_id']);
			$exam_scores->setMarks($rs['marks']);
			$exam_scores->setGrading_level_id($rs['grading_level_id']);
			$exam_scores->setRemarks($rs['remarks']);
			$exam_scores->setIs_failed($rs['is_failed']);
			$exam_scores->setCreated_at($rs['created_at']);
			$exam_scores->setUpdated_at($rs['updated_at']);
			$result[$count++] = $exam_scores;
		}

		$this->db->closeRs();
		if(count($result) > 0 ){
			return $result[0];
		}else{
			return null;
		}

	}

	/** DELETE VALUE BY ID FROM THE TABLE exam_scores */
	function deleteExam_ScoresById($id) {
		$SQL="DELETE FROM exam_scores WHERE id='$id'";
		$this->db->executeQuery($SQL);

	}
	function __destruct() {
		$this->db->close();
	}

}
?>