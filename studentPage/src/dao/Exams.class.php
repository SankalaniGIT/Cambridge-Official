<?php
/**
 *  This is auto generated by PHP5 Tools based on the Database Schema.
 *  Author : MahiShimi PHP5 Tools version 1.1
 *  Project : Cambridge
 *  Last Updated : Fri 08th Feb,2013 04:25 am
 *  Table Name : exams
 *  Modifier : This Db tool is currently modified by Maheshwaran Varghese on 10th August 2011
 */

class Exams
{
	public $id;
	public $exam_group_id;
	public $subject_id;
	public $start_time;
	public $end_time;
	public $maximum_marks;
	public $minimum_marks;
	public $grading_level_id;
	public $weightage;
	public $event_id;
	public $created_at;
	public $updated_at;
	public $max_order_no;

	//===int(11)===//
	public function getId(){return $this->id;}
	public function setId($id){$this->id= $id;}

	//===int(11)===//
	public function getExam_group_id(){return $this->exam_group_id;}
	public function setExam_group_id($exam_group_id){$this->exam_group_id= $exam_group_id;}

	//===int(11)===//
	public function getSubject_id(){return $this->subject_id;}
	public function setSubject_id($subject_id){$this->subject_id= $subject_id;}

	//===datetime===//
	public function getStart_time(){return $this->start_time;}
	public function setStart_time($start_time){$this->start_time= $start_time;}

	//===datetime===//
	public function getEnd_time(){return $this->end_time;}
	public function setEnd_time($end_time){$this->end_time= $end_time;}

	//===decimal(10,2)===//
	public function getMaximum_marks(){return $this->maximum_marks;}
	public function setMaximum_marks($maximum_marks){$this->maximum_marks= $maximum_marks;}

	//===decimal(10,2)===//
	public function getMinimum_marks(){return $this->minimum_marks;}
	public function setMinimum_marks($minimum_marks){$this->minimum_marks= $minimum_marks;}

	//===int(11)===//
	public function getGrading_level_id(){return $this->grading_level_id;}
	public function setGrading_level_id($grading_level_id){$this->grading_level_id= $grading_level_id;}

	//===int(11)===//
	public function getWeightage(){return $this->weightage;}
	public function setWeightage($weightage){$this->weightage= $weightage;}

	//===int(11)===//
	public function getEvent_id(){return $this->event_id;}
	public function setEvent_id($event_id){$this->event_id= $event_id;}

	//===datetime===//
	public function getCreated_at(){return $this->created_at;}
	public function setCreated_at($created_at){$this->created_at= $created_at;}

	//===datetime===//
	public function getUpdated_at(){return $this->updated_at;}
	public function setUpdated_at($updated_at){$this->updated_at= $updated_at;}

	//=== max_order_no ===//
	public function getMax_order_no(){return $this->max_order_no;}
	public function setMax_order_no($max_order_no){$this->max_order_no= $max_order_no;}

}


// Implement class of Exams
class ExamsDaoImpl
{
	private $db = null ;

	function __construct() {
		$this->db=new DBConnection();
	}

	/** SAVE THE Exams OBJECT INTO exams */
	function saveExams($exams) {
		$examsIn=new Exams();
		$examsIn=$exams;

		$SQL= sprintf("INSERT INTO exams(exam_group_id,subject_id,start_time,end_time,maximum_marks,minimum_marks,grading_level_id,weightage,event_id,created_at,updated_at) VALUES(%d,%d,'%s','%s',%d,%d,%d,%d,%d,'%s','%s')",
		mysql_real_escape_string($examsIn->getExam_group_id()),mysql_real_escape_string($examsIn->getSubject_id()),mysql_real_escape_string($examsIn->getStart_time()),mysql_real_escape_string($examsIn->getEnd_time()),mysql_real_escape_string($examsIn->getMaximum_marks()),mysql_real_escape_string($examsIn->getMinimum_marks()),mysql_real_escape_string($examsIn->getGrading_level_id()),mysql_real_escape_string($examsIn->getWeightage()),mysql_real_escape_string($examsIn->getEvent_id()),mysql_real_escape_string($examsIn->getCreated_at()),mysql_real_escape_string($examsIn->getUpdated_at()));

		$this->db->executeQuery($SQL);

	}


	/** UPDATE THE TABLE exams */
	function updateExams($exams) {
		$examsIn=new Exams();
		$examsIn=$exams;

		$SQL= sprintf("UPDATE exams SET exam_group_id=%d,subject_id=%d,start_time='%s',end_time='%s',maximum_marks=%d,minimum_marks=%d,grading_level_id=%d,weightage=%d,event_id=%d,created_at='%s',updated_at='%s' WHERE id=%d ",
		mysql_real_escape_string($examsIn->getExam_group_id()),mysql_real_escape_string($examsIn->getSubject_id()),mysql_real_escape_string($examsIn->getStart_time()),mysql_real_escape_string($examsIn->getEnd_time()),mysql_real_escape_string($examsIn->getMaximum_marks()),mysql_real_escape_string($examsIn->getMinimum_marks()),mysql_real_escape_string($examsIn->getGrading_level_id()),mysql_real_escape_string($examsIn->getWeightage()),mysql_real_escape_string($examsIn->getEvent_id()),mysql_real_escape_string($examsIn->getCreated_at()),mysql_real_escape_string($examsIn->getUpdated_at()),$examsIn->getId());

		$this->db->executeQuery($SQL);

	}

	/** GET ALL DATA FROM THE TABLE exams */
	function getAllExams() {
		$SQL="SELECT * FROM exams";
		$this->db->executeQuery($SQL);

		$result = array();
		$count = 0;

		while($rs = $this->db->nextRecord())
		{
			$exams = new Exams();
			$exams->setId($rs['id']);
			$exams->setExam_group_id($rs['exam_group_id']);
			$exams->setSubject_id($rs['subject_id']);
			$exams->setStart_time($rs['start_time']);
			$exams->setEnd_time($rs['end_time']);
			$exams->setMaximum_marks($rs['maximum_marks']);
			$exams->setMinimum_marks($rs['minimum_marks']);
			$exams->setGrading_level_id($rs['grading_level_id']);
			$exams->setWeightage($rs['weightage']);
			$exams->setEvent_id($rs['event_id']);
			$exams->setCreated_at($rs['created_at']);
			$exams->setUpdated_at($rs['updated_at']);
			$result[$count++] = $exams;
		}

		$this->db->closeRs();
		return $result;

	}

	/** GET ALL DATA BY STATUS FROM THE TABLE exams */
	function getAllExamsByStatus() {
		$SQL="SELECT * FROM exams WHERE status = 'Yes'";
		$this->db->executeQuery($SQL);

		$result = array();
		$count = 0;

		while($rs = $this->db->nextRecord())
		{
			$exams = new Exams();
			$exams->setId($rs['id']);
			$exams->setExam_group_id($rs['exam_group_id']);
			$exams->setSubject_id($rs['subject_id']);
			$exams->setStart_time($rs['start_time']);
			$exams->setEnd_time($rs['end_time']);
			$exams->setMaximum_marks($rs['maximum_marks']);
			$exams->setMinimum_marks($rs['minimum_marks']);
			$exams->setGrading_level_id($rs['grading_level_id']);
			$exams->setWeightage($rs['weightage']);
			$exams->setEvent_id($rs['event_id']);
			$exams->setCreated_at($rs['created_at']);
			$exams->setUpdated_at($rs['updated_at']);
			$result[$count++] = $exams;
		}

		$this->db->closeRs();
		return $result;

	}

	/** GET ALL DATA BY ID DESC FROM THE TABLE exams */
	function getAllExamsByIdDesc() {
		$SQL="SELECT * FROM exams ORDER BY id DESC";
		$this->db->executeQuery($SQL);

		$result = array();
		$count = 0;

		while($rs = $this->db->nextRecord())
		{
			$exams = new Exams();
			$exams->setId($rs['id']);
			$exams->setExam_group_id($rs['exam_group_id']);
			$exams->setSubject_id($rs['subject_id']);
			$exams->setStart_time($rs['start_time']);
			$exams->setEnd_time($rs['end_time']);
			$exams->setMaximum_marks($rs['maximum_marks']);
			$exams->setMinimum_marks($rs['minimum_marks']);
			$exams->setGrading_level_id($rs['grading_level_id']);
			$exams->setWeightage($rs['weightage']);
			$exams->setEvent_id($rs['event_id']);
			$exams->setCreated_at($rs['created_at']);
			$exams->setUpdated_at($rs['updated_at']);
			$result[$count++] = $exams;
		}

		$this->db->closeRs();
		return $result;

	}

	/** GET ONE DATA BY ID FROM THE TABLE exams */
	function getOneExamsById($id) {
		$SQL="SELECT * FROM exams WHERE id = '$id'";
		$this->db->executeQuery($SQL);

		$result = array();
		$count = 0;

		while($rs = $this->db->nextRecord())
		{
			$exams = new Exams();
			$exams->setId($rs['id']);
			$exams->setExam_group_id($rs['exam_group_id']);
			$exams->setSubject_id($rs['subject_id']);
			$exams->setStart_time($rs['start_time']);
			$exams->setEnd_time($rs['end_time']);
			$exams->setMaximum_marks($rs['maximum_marks']);
			$exams->setMinimum_marks($rs['minimum_marks']);
			$exams->setGrading_level_id($rs['grading_level_id']);
			$exams->setWeightage($rs['weightage']);
			$exams->setEvent_id($rs['event_id']);
			$exams->setCreated_at($rs['created_at']);
			$exams->setUpdated_at($rs['updated_at']);
			$result[$count++] = $exams;
		}

		$this->db->closeRs();
		if(count($result) > 0 ){
			return $result[0];
		}else{
			return null;
		}
	}

	/** GET DATA BY ID, STATUS FROM THE TABLE exams */
	function getAllExamsById_Status($id) {
		$SQL="SELECT * FROM exams WHERE id = '$id' AND status = 'Yes'";
		$this->db->executeQuery($SQL);

		$result = array();
		$count = 0;

		while($rs = $this->db->nextRecord())
		{
			$exams = new Exams();
			$exams->setId($rs['id']);
			$exams->setExam_group_id($rs['exam_group_id']);
			$exams->setSubject_id($rs['subject_id']);
			$exams->setStart_time($rs['start_time']);
			$exams->setEnd_time($rs['end_time']);
			$exams->setMaximum_marks($rs['maximum_marks']);
			$exams->setMinimum_marks($rs['minimum_marks']);
			$exams->setGrading_level_id($rs['grading_level_id']);
			$exams->setWeightage($rs['weightage']);
			$exams->setEvent_id($rs['event_id']);
			$exams->setCreated_at($rs['created_at']);
			$exams->setUpdated_at($rs['updated_at']);
			$result[$count++] = $exams;
		}

		$this->db->closeRs();
		if(count($result) > 0 ){
			return $result[0];
		}else{
			return null;
		}
	}

	/** GET LAST RECORD FROM THE TABLE exams */
	function getLastRec($field) {
		$SQL="SELECT * FROM exams ORDER BY $field DESC LIMIT 1";
		$this->db->executeQuery($SQL);

		$result = array();
		$count = 0;

		while($rs = $this->db->nextRecord())
		{
			$exams = new Exams();
			$exams->setId($rs['id']);
			$exams->setExam_group_id($rs['exam_group_id']);
			$exams->setSubject_id($rs['subject_id']);
			$exams->setStart_time($rs['start_time']);
			$exams->setEnd_time($rs['end_time']);
			$exams->setMaximum_marks($rs['maximum_marks']);
			$exams->setMinimum_marks($rs['minimum_marks']);
			$exams->setGrading_level_id($rs['grading_level_id']);
			$exams->setWeightage($rs['weightage']);
			$exams->setEvent_id($rs['event_id']);
			$exams->setCreated_at($rs['created_at']);
			$exams->setUpdated_at($rs['updated_at']);
			$result[$count++] = $exams;
		}

		$this->db->closeRs();
		if(count($result) > 0 ){
			return $result[0];
		}else{
			return null;
		}
	}

	/** GET DATA ORDER BY ORDER_NO, STATUS FROM THE TABLE exams */
	function getAllExams_By_Status_ORDER_BY_Order_no() {
		$SQL="SELECT * FROM exams WHERE status = 'Yes' ORDER BY CAST(order_no AS DECIMAL)";
		$this->db->executeQuery($SQL);

		$result = array();
		$count = 0;

		while($rs = $this->db->nextRecord())
		{
			$exams = new Exams();
			$exams->setId($rs['id']);
			$exams->setExam_group_id($rs['exam_group_id']);
			$exams->setSubject_id($rs['subject_id']);
			$exams->setStart_time($rs['start_time']);
			$exams->setEnd_time($rs['end_time']);
			$exams->setMaximum_marks($rs['maximum_marks']);
			$exams->setMinimum_marks($rs['minimum_marks']);
			$exams->setGrading_level_id($rs['grading_level_id']);
			$exams->setWeightage($rs['weightage']);
			$exams->setEvent_id($rs['event_id']);
			$exams->setCreated_at($rs['created_at']);
			$exams->setUpdated_at($rs['updated_at']);
			$result[$count++] = $exams;
		}

		$this->db->closeRs();
		return $result;

	}

	/** GET DATA BY ID, STATUS ORDER BY ORDER_NO FROM THE TABLE exams */
	function getExams_By_Id_Status_ORDER_BY_Order_no() {
		$SQL="SELECT * FROM exams WHERE id = '$id' AND status = 'Yes' ORDER BY CAST(order_no AS DECIMAL)";
		$this->db->executeQuery($SQL);

		$result = array();
		$count = 0;

		while($rs = $this->db->nextRecord())
		{
			$exams = new Exams();
			$exams->setId($rs['id']);
			$exams->setExam_group_id($rs['exam_group_id']);
			$exams->setSubject_id($rs['subject_id']);
			$exams->setStart_time($rs['start_time']);
			$exams->setEnd_time($rs['end_time']);
			$exams->setMaximum_marks($rs['maximum_marks']);
			$exams->setMinimum_marks($rs['minimum_marks']);
			$exams->setGrading_level_id($rs['grading_level_id']);
			$exams->setWeightage($rs['weightage']);
			$exams->setEvent_id($rs['event_id']);
			$exams->setCreated_at($rs['created_at']);
			$exams->setUpdated_at($rs['updated_at']);
			$result[$count++] = $exams;
		}

		$this->db->closeRs();
		if(count($result) > 0 ){
			return $result[0];
		}else{
			return null;
		}
	}

	/** GET DATA MAXIMUM ORDER NO FROM THE TABLE exams */
	function getLastOrderNo() {
		$SQL="SELECT MAX(CAST(order_no AS DECIMAL)) AS max_order_no FROM exams";
		$this->db->executeQuery($SQL);

		$result = array();
		$count = 0;

		while($rs = $this->db->nextRecord())
		{
			$exams = new Exams();
			$exams->setId($rs['id']);
			$exams->setExam_group_id($rs['exam_group_id']);
			$exams->setSubject_id($rs['subject_id']);
			$exams->setStart_time($rs['start_time']);
			$exams->setEnd_time($rs['end_time']);
			$exams->setMaximum_marks($rs['maximum_marks']);
			$exams->setMinimum_marks($rs['minimum_marks']);
			$exams->setGrading_level_id($rs['grading_level_id']);
			$exams->setWeightage($rs['weightage']);
			$exams->setEvent_id($rs['event_id']);
			$exams->setCreated_at($rs['created_at']);
			$exams->setUpdated_at($rs['updated_at']);
			$exams->setMax_order_no($rs['max_order_no']);
			$result[$count++] = $exams;
		}

		$this->db->closeRs();
		if(count($result) > 0 ){
			return $result[0];
		}else{
			return null;
		}
	}

	function getExams_By_Exam_group_id($exam_group_id) {
		$SQL="SELECT * FROM exams WHERE exam_group_id = '$exam_group_id'";
		$this->db->executeQuery($SQL);

		$result = array();
		$count = 0;

		while($rs = $this->db->nextRecord())
		{
			$exams = new Exams();
			$exams->setId($rs['id']);
			$exams->setExam_group_id($rs['exam_group_id']);
			$exams->setSubject_id($rs['subject_id']);
			$exams->setStart_time($rs['start_time']);
			$exams->setEnd_time($rs['end_time']);
			$exams->setMaximum_marks($rs['maximum_marks']);
			$exams->setMinimum_marks($rs['minimum_marks']);
			$exams->setGrading_level_id($rs['grading_level_id']);
			$exams->setWeightage($rs['weightage']);
			$exams->setEvent_id($rs['event_id']);
			$exams->setCreated_at($rs['created_at']);
			$exams->setUpdated_at($rs['updated_at']);
			$result[$count++] = $exams;
		}

		$this->db->closeRs();
		if(count($result) > 0 ){
			return $result;
		}else{
			return null;
		}
	}

	/** DELETE VALUE BY ID FROM THE TABLE exams */
	function deleteExamsById($id) {
		$SQL="DELETE FROM exams WHERE id='$id'";
		$this->db->executeQuery($SQL);

	}
	function __destruct() {
		$this->db->close();
	}

}
?>